
import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export default function TaxCalculator() {
  const [income, setIncome] = useState(0);
  const personalDeduction = 60000;
  const [spouse, setSpouse] = useState(false);
  const [children, setChildren] = useState(0);
  const [parents, setParents] = useState(0);
  const [insurance, setInsurance] = useState(0);
  const [loanInterest, setLoanInterest] = useState(0);
  const [investment, setInvestment] = useState(0);
  const [donation, setDonation] = useState(0);
  const [tax, setTax] = useState(null);
  const [summary, setSummary] = useState(null);
  const [taxBreakdown, setTaxBreakdown] = useState([]);
  const [advice, setAdvice] = useState("");

  const calculateTax = () => {
    const allowedExpenses = income * 0.5;

    const spouseDeduction = spouse ? 60000 : 0;
    const childrenDeduction = children * 30000;
    const parentsDeduction = parents * 30000;
    const totalDeduction =
      personalDeduction + spouseDeduction + childrenDeduction + parentsDeduction + insurance + loanInterest;

    const taxableIncome = Math.max(
      income - allowedExpenses - totalDeduction - investment - donation,
      0
    );

    let calculatedTax = 0;
    let remaining = taxableIncome;
    const breakdown = [];

    const brackets = [
      { limit: 150000, rate: 0 },
      { limit: 150000, rate: 0.05 },
      { limit: 200000, rate: 0.1 },
      { limit: 250000, rate: 0.15 },
      { limit: 250000, rate: 0.2 },
      { limit: 1000000, rate: 0.25 },
      { limit: 2000000, rate: 0.3 },
      { limit: Infinity, rate: 0.35 },
    ];

    for (let b of brackets) {
      const amt = Math.min(remaining, b.limit);
      const taxAmt = amt * b.rate;
      breakdown.push({ amount: amt, rate: b.rate, tax: taxAmt });
      calculatedTax += taxAmt;
      remaining -= amt;
      if (remaining <= 0) break;
    }

    setTax(calculatedTax);
    setTaxBreakdown(breakdown);
    setSummary({
      totalIncome: income,
      totalDeduction: totalDeduction + allowedExpenses + investment + donation,
      netIncome: taxableIncome,
    });

    let adviceMsg = [];
    if (investment < 100000) adviceMsg.push("üìà ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô RMF/SSF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô");
    if (donation < 100000) adviceMsg.push("‚ù§Ô∏è ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏∏‡∏®‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô");
    if (!spouse) adviceMsg.push("üë©‚Äç‚ù§Ô∏è‚Äçüë® ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    if (insurance < 100000) adviceMsg.push("üè• ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï/‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á 100,000 ‡∏ö‡∏≤‡∏ó");

    setAdvice(adviceMsg);
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6 text-center">‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤</h1>
      <Card className="mb-4">
        <CardContent className="grid gap-4 p-4">
          <div>
            <label>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ (‡∏ö‡∏≤‡∏ó)</label>
            <Input type="number" value={income} onChange={(e) => setIncome(Number(e.target.value))} />
          </div>
          <div className="flex items-center gap-2">
            <input type="checkbox" checked={spouse} onChange={(e) => setSpouse(e.target.checked)} />
            <label>üë©‚Äç‚ù§Ô∏è‚Äçüë® ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (60,000 ‡∏ö‡∏≤‡∏ó)</label>
          </div>
          <div>
            <label>üë∂ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏∏‡∏ï‡∏£ (‡∏Ñ‡∏ô)</label>
            <Input type="number" value={children} onChange={(e) => setChildren(Number(e.target.value))} />
          </div>
          <div>
            <label>üëµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏• (‡∏Ñ‡∏ô)</label>
            <Input type="number" value={parents} onChange={(e) => setParents(Number(e.target.value))} />
          </div>
          <div>
            <label>üè• ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û / ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (‡∏ö‡∏≤‡∏ó)</label>
            <Input type="number" value={insurance} onChange={(e) => setInsurance(Number(e.target.value))} />
          </div>
          <div>
            <label>üìö ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ö‡πâ‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
            <Input type="number" value={loanInterest} onChange={(e) => setLoanInterest(Number(e.target.value))} />
          </div>
          <div>
            <label>‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô (RMF, SSF ‡∏Ø‡∏•‡∏Ø)</label>
            <Input type="number" value={investment} onChange={(e) => setInvestment(Number(e.target.value))} />
          </div>
          <div>
            <label>‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</label>
            <Input type="number" value={donation} onChange={(e) => setDonation(Number(e.target.value))} />
          </div>
          <Button onClick={calculateTax}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ</Button>
        </CardContent>
      </Card>
    </div>
  );
}
